LeetCode 1004: Max Consecutive Ones III
📝 Problem Statement

You’re given a binary array nums and an integer k.

You can flip at most k zeros into ones.

Return the maximum number of consecutive ones in the array after flips.

🔑 Key Idea

This is a sliding window problem:

Maintain a window [i…j] that contains at most k zeros.

Expand j (right pointer).

If zeros exceed k, shrink the window by moving i (left pointer).

Track the maximum valid window length.

🧠 Step-by-Step Thought Process

1] Use two pointers: i (left), j (right).

2] Keep a counter countZero for number of 0s in the current window.

3] For each nums[j]:

    If it’s 0, increase countZero.
    
    If countZero > k:
    
    Move i forward until countZero <= k.
    
    If you remove a 0, decrement countZero.

4] At every step, update answer:

maxLen = max(maxLen, j - i)

(because j is always one step ahead of last valid element).

🌟 Takeaway

1] Classic sliding window template: expand → check validity → shrink → update result.

2] Instead of restarting count, adjust window boundaries.

3] This same approach applies to many problems like "longest substring with at most K distinct chars".
